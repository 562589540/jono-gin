package {{.NameEn}}

import (
	"context"
	"fmt"
	"github.com/562589540/jono-gin/ghub/gutils"
	"github.com/562589540/jono-gin/internal/app/common/dal"
	"github.com/562589540/jono-gin/internal/app/{{ .AppName }}/dto"
	"github.com/562589540/jono-gin/internal/app/{{ .AppName }}/model"
	"github.com/562589540/jono-gin/internal/app/{{ .AppName }}/service"
	"github.com/562589540/jono-gin/internal/constants"
)

var {{.NameEn}}Service service.I{{ .NameEnPas }}Service

type Service struct{}

func New() service.I{{ .NameEnPas }}Service {
	if {{.NameEn}}Service == nil {
		{{.NameEn}}Service = &Service{}
	}
	return {{.NameEn}}Service
}

func (m *Service) Dao(ctx context.Context) dal.I{{ .NameEnPas }}Do {
	return dal.{{ .NameEnPas }}.WithContext(ctx)
}

func (m *Service) Create(ctx context.Context, data *dto.{{ .NameEnPas }}AddReq) error {
	mModel := new(model.{{ .NameEnPas }})
	if err := ghub.Copy(mModel, data); err != nil {
		return err
	}
	return m.Dao(ctx).Create(mModel)
}

func (m *Service) Delete(ctx context.Context, ids []uint) error {
	dao := dal.{{ .NameEnPas }}
	info, err := dao.WithContext(ctx).Where(dao.ID.In(ids...)).Delete()
	if err != nil {
		return err
	}
    if info.RowsAffected == 0 {
        return fmt.Errorf(constants.DeleteError)
    }
	return nil
}

func (m *Service) Update(ctx context.Context, data *dto.{{ .NameEnPas }}UpdateReq) error {
	dao := dal.{{ .NameEnPas }}
	mModel, err := dao.WithContext(ctx).Where(dao.ID.Eq(data.ID)).First()
	if err != nil {
		return fmt.Errorf(constants.NoDataFound)
	}
	if err = ghub.Copy(mModel, data); err != nil {
		return err
	}
	return dao.WithContext(ctx).Save(mModel)
}

func (m *Service) List(ctx context.Context, search *dto.{{ .NameEnPas }}SearchReq) ([]dto.{{ .NameEnPas }}, int64, error) {
	dao := dal.{{ .NameEnPas }}
	q := dao.WithContext(ctx)
{{ customSearch }}
	list := make([]dto.{{ .NameEnPas }}, 0)
{{ customSort }}
	if err != nil {
		return nil, 0, err
	}
	return list, count, nil
}
