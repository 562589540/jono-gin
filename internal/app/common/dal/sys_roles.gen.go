// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/562589540/jono-gin/internal/app/system/model"
)

func newRoles(db *gorm.DB, opts ...gen.DOOption) roles {
	_roles := roles{}

	_roles.rolesDo.UseDB(db, opts...)
	_roles.rolesDo.UseModel(&model.Roles{})

	tableName := _roles.rolesDo.TableName()
	_roles.ALL = field.NewAsterisk(tableName)
	_roles.ID = field.NewUint(tableName, "id")
	_roles.CreatedAt = field.NewTime(tableName, "created_at")
	_roles.UpdatedAt = field.NewTime(tableName, "updated_at")
	_roles.Name = field.NewString(tableName, "name")
	_roles.Code = field.NewString(tableName, "code")
	_roles.Order_ = field.NewInt(tableName, "order")
	_roles.Status = field.NewBool(tableName, "status")
	_roles.Remark = field.NewString(tableName, "remark")
	_roles.Menus = rolesManyToManyMenus{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Menus", "model.Menu"),
		Children: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Menus.Children", "model.Menu"),
		},
		Roles: struct {
			field.RelationField
			Menus struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Menus.Roles", "model.Roles"),
			Menus: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Menus.Roles.Menus", "model.Menu"),
			},
		},
	}

	_roles.fillFieldMap()

	return _roles
}

type roles struct {
	rolesDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	Name      field.String
	Code      field.String
	Order_    field.Int
	Status    field.Bool
	Remark    field.String
	Menus     rolesManyToManyMenus

	fieldMap map[string]field.Expr
}

func (r roles) Table(newTableName string) *roles {
	r.rolesDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roles) As(alias string) *roles {
	r.rolesDo.DO = *(r.rolesDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roles) updateTableName(table string) *roles {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.Name = field.NewString(table, "name")
	r.Code = field.NewString(table, "code")
	r.Order_ = field.NewInt(table, "order")
	r.Status = field.NewBool(table, "status")
	r.Remark = field.NewString(table, "remark")

	r.fillFieldMap()

	return r
}

func (r *roles) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roles) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["name"] = r.Name
	r.fieldMap["code"] = r.Code
	r.fieldMap["order"] = r.Order_
	r.fieldMap["status"] = r.Status
	r.fieldMap["remark"] = r.Remark

}

func (r roles) clone(db *gorm.DB) roles {
	r.rolesDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roles) replaceDB(db *gorm.DB) roles {
	r.rolesDo.ReplaceDB(db)
	return r
}

type rolesManyToManyMenus struct {
	db *gorm.DB

	field.RelationField

	Children struct {
		field.RelationField
	}
	Roles struct {
		field.RelationField
		Menus struct {
			field.RelationField
		}
	}
}

func (a rolesManyToManyMenus) Where(conds ...field.Expr) *rolesManyToManyMenus {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a rolesManyToManyMenus) WithContext(ctx context.Context) *rolesManyToManyMenus {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a rolesManyToManyMenus) Session(session *gorm.Session) *rolesManyToManyMenus {
	a.db = a.db.Session(session)
	return &a
}

func (a rolesManyToManyMenus) Model(m *model.Roles) *rolesManyToManyMenusTx {
	return &rolesManyToManyMenusTx{a.db.Model(m).Association(a.Name())}
}

type rolesManyToManyMenusTx struct{ tx *gorm.Association }

func (a rolesManyToManyMenusTx) Find() (result []*model.Menu, err error) {
	return result, a.tx.Find(&result)
}

func (a rolesManyToManyMenusTx) Append(values ...*model.Menu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a rolesManyToManyMenusTx) Replace(values ...*model.Menu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a rolesManyToManyMenusTx) Delete(values ...*model.Menu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a rolesManyToManyMenusTx) Clear() error {
	return a.tx.Clear()
}

func (a rolesManyToManyMenusTx) Count() int64 {
	return a.tx.Count()
}

type rolesDo struct{ gen.DO }

type IRolesDo interface {
	gen.SubQuery
	Debug() IRolesDo
	WithContext(ctx context.Context) IRolesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRolesDo
	WriteDB() IRolesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRolesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRolesDo
	Not(conds ...gen.Condition) IRolesDo
	Or(conds ...gen.Condition) IRolesDo
	Select(conds ...field.Expr) IRolesDo
	Where(conds ...gen.Condition) IRolesDo
	Order(conds ...field.Expr) IRolesDo
	Distinct(cols ...field.Expr) IRolesDo
	Omit(cols ...field.Expr) IRolesDo
	Join(table schema.Tabler, on ...field.Expr) IRolesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRolesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRolesDo
	Group(cols ...field.Expr) IRolesDo
	Having(conds ...gen.Condition) IRolesDo
	Limit(limit int) IRolesDo
	Offset(offset int) IRolesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRolesDo
	Unscoped() IRolesDo
	Create(values ...*model.Roles) error
	CreateInBatches(values []*model.Roles, batchSize int) error
	Save(values ...*model.Roles) error
	First() (*model.Roles, error)
	Take() (*model.Roles, error)
	Last() (*model.Roles, error)
	Find() ([]*model.Roles, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Roles, err error)
	FindInBatches(result *[]*model.Roles, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Roles) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRolesDo
	Assign(attrs ...field.AssignExpr) IRolesDo
	Joins(fields ...field.RelationField) IRolesDo
	Preload(fields ...field.RelationField) IRolesDo
	FirstOrInit() (*model.Roles, error)
	FirstOrCreate() (*model.Roles, error)
	FindByPage(offset int, limit int) (result []*model.Roles, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRolesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id uint) (result model.Roles, err error)
	DeleteByID(id uint) (rowsAffected int64, err error)
	DeleteByIDs(ids []uint) (rowsAffected int64, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (r rolesDo) GetByID(id uint) (result model.Roles, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM sys_roles WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table WHERE id=@id
func (r rolesDo) DeleteByID(id uint) (rowsAffected int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("DELETE FROM sys_roles WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	rowsAffected = executeSQL.RowsAffected
	err = executeSQL.Error

	return
}

// DELETE FROM @@table WHERE id IN (@ids)
func (r rolesDo) DeleteByIDs(ids []uint) (rowsAffected int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, ids)
	generateSQL.WriteString("DELETE FROM sys_roles WHERE id IN (?) ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	rowsAffected = executeSQL.RowsAffected
	err = executeSQL.Error

	return
}

func (r rolesDo) Debug() IRolesDo {
	return r.withDO(r.DO.Debug())
}

func (r rolesDo) WithContext(ctx context.Context) IRolesDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rolesDo) ReadDB() IRolesDo {
	return r.Clauses(dbresolver.Read)
}

func (r rolesDo) WriteDB() IRolesDo {
	return r.Clauses(dbresolver.Write)
}

func (r rolesDo) Session(config *gorm.Session) IRolesDo {
	return r.withDO(r.DO.Session(config))
}

func (r rolesDo) Clauses(conds ...clause.Expression) IRolesDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rolesDo) Returning(value interface{}, columns ...string) IRolesDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rolesDo) Not(conds ...gen.Condition) IRolesDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rolesDo) Or(conds ...gen.Condition) IRolesDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rolesDo) Select(conds ...field.Expr) IRolesDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rolesDo) Where(conds ...gen.Condition) IRolesDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rolesDo) Order(conds ...field.Expr) IRolesDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rolesDo) Distinct(cols ...field.Expr) IRolesDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rolesDo) Omit(cols ...field.Expr) IRolesDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rolesDo) Join(table schema.Tabler, on ...field.Expr) IRolesDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rolesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRolesDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rolesDo) RightJoin(table schema.Tabler, on ...field.Expr) IRolesDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rolesDo) Group(cols ...field.Expr) IRolesDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rolesDo) Having(conds ...gen.Condition) IRolesDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rolesDo) Limit(limit int) IRolesDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rolesDo) Offset(offset int) IRolesDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rolesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRolesDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rolesDo) Unscoped() IRolesDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rolesDo) Create(values ...*model.Roles) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rolesDo) CreateInBatches(values []*model.Roles, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rolesDo) Save(values ...*model.Roles) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rolesDo) First() (*model.Roles, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Roles), nil
	}
}

func (r rolesDo) Take() (*model.Roles, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Roles), nil
	}
}

func (r rolesDo) Last() (*model.Roles, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Roles), nil
	}
}

func (r rolesDo) Find() ([]*model.Roles, error) {
	result, err := r.DO.Find()
	return result.([]*model.Roles), err
}

func (r rolesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Roles, err error) {
	buf := make([]*model.Roles, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rolesDo) FindInBatches(result *[]*model.Roles, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rolesDo) Attrs(attrs ...field.AssignExpr) IRolesDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rolesDo) Assign(attrs ...field.AssignExpr) IRolesDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rolesDo) Joins(fields ...field.RelationField) IRolesDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rolesDo) Preload(fields ...field.RelationField) IRolesDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rolesDo) FirstOrInit() (*model.Roles, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Roles), nil
	}
}

func (r rolesDo) FirstOrCreate() (*model.Roles, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Roles), nil
	}
}

func (r rolesDo) FindByPage(offset int, limit int) (result []*model.Roles, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rolesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rolesDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rolesDo) Delete(models ...*model.Roles) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rolesDo) withDO(do gen.Dao) *rolesDo {
	r.DO = *do.(*gen.DO)
	return r
}
