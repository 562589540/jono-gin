// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q          = new(Query)
	Admin      *admin
	Attachment *attachment
	Chunk      *chunk
	Dept       *dept
	DictData   *dictData
	DictType   *dictType
	LoginLog   *loginLog
	Menu       *menu
	OperLog    *operLog
	Roles      *roles
	SysGen     *sysGen
	SysJob     *sysJob
	TaskLog    *taskLog
	UserOnline *userOnline
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Admin = &Q.Admin
	Attachment = &Q.Attachment
	Chunk = &Q.Chunk
	Dept = &Q.Dept
	DictData = &Q.DictData
	DictType = &Q.DictType
	LoginLog = &Q.LoginLog
	Menu = &Q.Menu
	OperLog = &Q.OperLog
	Roles = &Q.Roles
	SysGen = &Q.SysGen
	SysJob = &Q.SysJob
	TaskLog = &Q.TaskLog
	UserOnline = &Q.UserOnline
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:         db,
		Admin:      newAdmin(db, opts...),
		Attachment: newAttachment(db, opts...),
		Chunk:      newChunk(db, opts...),
		Dept:       newDept(db, opts...),
		DictData:   newDictData(db, opts...),
		DictType:   newDictType(db, opts...),
		LoginLog:   newLoginLog(db, opts...),
		Menu:       newMenu(db, opts...),
		OperLog:    newOperLog(db, opts...),
		Roles:      newRoles(db, opts...),
		SysGen:     newSysGen(db, opts...),
		SysJob:     newSysJob(db, opts...),
		TaskLog:    newTaskLog(db, opts...),
		UserOnline: newUserOnline(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Admin      admin
	Attachment attachment
	Chunk      chunk
	Dept       dept
	DictData   dictData
	DictType   dictType
	LoginLog   loginLog
	Menu       menu
	OperLog    operLog
	Roles      roles
	SysGen     sysGen
	SysJob     sysJob
	TaskLog    taskLog
	UserOnline userOnline
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Admin:      q.Admin.clone(db),
		Attachment: q.Attachment.clone(db),
		Chunk:      q.Chunk.clone(db),
		Dept:       q.Dept.clone(db),
		DictData:   q.DictData.clone(db),
		DictType:   q.DictType.clone(db),
		LoginLog:   q.LoginLog.clone(db),
		Menu:       q.Menu.clone(db),
		OperLog:    q.OperLog.clone(db),
		Roles:      q.Roles.clone(db),
		SysGen:     q.SysGen.clone(db),
		SysJob:     q.SysJob.clone(db),
		TaskLog:    q.TaskLog.clone(db),
		UserOnline: q.UserOnline.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Admin:      q.Admin.replaceDB(db),
		Attachment: q.Attachment.replaceDB(db),
		Chunk:      q.Chunk.replaceDB(db),
		Dept:       q.Dept.replaceDB(db),
		DictData:   q.DictData.replaceDB(db),
		DictType:   q.DictType.replaceDB(db),
		LoginLog:   q.LoginLog.replaceDB(db),
		Menu:       q.Menu.replaceDB(db),
		OperLog:    q.OperLog.replaceDB(db),
		Roles:      q.Roles.replaceDB(db),
		SysGen:     q.SysGen.replaceDB(db),
		SysJob:     q.SysJob.replaceDB(db),
		TaskLog:    q.TaskLog.replaceDB(db),
		UserOnline: q.UserOnline.replaceDB(db),
	}
}

type queryCtx struct {
	Admin      IAdminDo
	Attachment IAttachmentDo
	Chunk      IChunkDo
	Dept       IDeptDo
	DictData   IDictDataDo
	DictType   IDictTypeDo
	LoginLog   ILoginLogDo
	Menu       IMenuDo
	OperLog    IOperLogDo
	Roles      IRolesDo
	SysGen     ISysGenDo
	SysJob     ISysJobDo
	TaskLog    ITaskLogDo
	UserOnline IUserOnlineDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Admin:      q.Admin.WithContext(ctx),
		Attachment: q.Attachment.WithContext(ctx),
		Chunk:      q.Chunk.WithContext(ctx),
		Dept:       q.Dept.WithContext(ctx),
		DictData:   q.DictData.WithContext(ctx),
		DictType:   q.DictType.WithContext(ctx),
		LoginLog:   q.LoginLog.WithContext(ctx),
		Menu:       q.Menu.WithContext(ctx),
		OperLog:    q.OperLog.WithContext(ctx),
		Roles:      q.Roles.WithContext(ctx),
		SysGen:     q.SysGen.WithContext(ctx),
		SysJob:     q.SysJob.WithContext(ctx),
		TaskLog:    q.TaskLog.WithContext(ctx),
		UserOnline: q.UserOnline.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
