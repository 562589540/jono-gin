// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/562589540/jono-gin/internal/app/system/model"
)

func newAttachment(db *gorm.DB, opts ...gen.DOOption) attachment {
	_attachment := attachment{}

	_attachment.attachmentDo.UseDB(db, opts...)
	_attachment.attachmentDo.UseModel(&model.Attachment{})

	tableName := _attachment.attachmentDo.TableName()
	_attachment.ALL = field.NewAsterisk(tableName)
	_attachment.ID = field.NewInt64(tableName, "id")
	_attachment.FileName = field.NewString(tableName, "file_name")
	_attachment.FileSize = field.NewString(tableName, "file_size")
	_attachment.FileType = field.NewString(tableName, "file_type")
	_attachment.Path = field.NewString(tableName, "path")
	_attachment.StorageEngine = field.NewInt(tableName, "storage_engine")
	_attachment.Hash = field.NewString(tableName, "hash")
	_attachment.Class = field.NewUint(tableName, "class")
	_attachment.CreatedBy = field.NewUint(tableName, "created_by")
	_attachment.Status = field.NewInt8(tableName, "status")
	_attachment.TotalChunks = field.NewInt(tableName, "total_chunks")
	_attachment.CreatedAt = field.NewTime(tableName, "created_at")

	_attachment.fillFieldMap()

	return _attachment
}

type attachment struct {
	attachmentDo

	ALL           field.Asterisk
	ID            field.Int64
	FileName      field.String
	FileSize      field.String
	FileType      field.String
	Path          field.String
	StorageEngine field.Int
	Hash          field.String
	Class         field.Uint
	CreatedBy     field.Uint
	Status        field.Int8
	TotalChunks   field.Int
	CreatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (a attachment) Table(newTableName string) *attachment {
	a.attachmentDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attachment) As(alias string) *attachment {
	a.attachmentDo.DO = *(a.attachmentDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attachment) updateTableName(table string) *attachment {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.FileName = field.NewString(table, "file_name")
	a.FileSize = field.NewString(table, "file_size")
	a.FileType = field.NewString(table, "file_type")
	a.Path = field.NewString(table, "path")
	a.StorageEngine = field.NewInt(table, "storage_engine")
	a.Hash = field.NewString(table, "hash")
	a.Class = field.NewUint(table, "class")
	a.CreatedBy = field.NewUint(table, "created_by")
	a.Status = field.NewInt8(table, "status")
	a.TotalChunks = field.NewInt(table, "total_chunks")
	a.CreatedAt = field.NewTime(table, "created_at")

	a.fillFieldMap()

	return a
}

func (a *attachment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attachment) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["file_name"] = a.FileName
	a.fieldMap["file_size"] = a.FileSize
	a.fieldMap["file_type"] = a.FileType
	a.fieldMap["path"] = a.Path
	a.fieldMap["storage_engine"] = a.StorageEngine
	a.fieldMap["hash"] = a.Hash
	a.fieldMap["class"] = a.Class
	a.fieldMap["created_by"] = a.CreatedBy
	a.fieldMap["status"] = a.Status
	a.fieldMap["total_chunks"] = a.TotalChunks
	a.fieldMap["created_at"] = a.CreatedAt
}

func (a attachment) clone(db *gorm.DB) attachment {
	a.attachmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attachment) replaceDB(db *gorm.DB) attachment {
	a.attachmentDo.ReplaceDB(db)
	return a
}

type attachmentDo struct{ gen.DO }

type IAttachmentDo interface {
	gen.SubQuery
	Debug() IAttachmentDo
	WithContext(ctx context.Context) IAttachmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAttachmentDo
	WriteDB() IAttachmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAttachmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAttachmentDo
	Not(conds ...gen.Condition) IAttachmentDo
	Or(conds ...gen.Condition) IAttachmentDo
	Select(conds ...field.Expr) IAttachmentDo
	Where(conds ...gen.Condition) IAttachmentDo
	Order(conds ...field.Expr) IAttachmentDo
	Distinct(cols ...field.Expr) IAttachmentDo
	Omit(cols ...field.Expr) IAttachmentDo
	Join(table schema.Tabler, on ...field.Expr) IAttachmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo
	Group(cols ...field.Expr) IAttachmentDo
	Having(conds ...gen.Condition) IAttachmentDo
	Limit(limit int) IAttachmentDo
	Offset(offset int) IAttachmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAttachmentDo
	Unscoped() IAttachmentDo
	Create(values ...*model.Attachment) error
	CreateInBatches(values []*model.Attachment, batchSize int) error
	Save(values ...*model.Attachment) error
	First() (*model.Attachment, error)
	Take() (*model.Attachment, error)
	Last() (*model.Attachment, error)
	Find() ([]*model.Attachment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Attachment, err error)
	FindInBatches(result *[]*model.Attachment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Attachment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAttachmentDo
	Assign(attrs ...field.AssignExpr) IAttachmentDo
	Joins(fields ...field.RelationField) IAttachmentDo
	Preload(fields ...field.RelationField) IAttachmentDo
	FirstOrInit() (*model.Attachment, error)
	FirstOrCreate() (*model.Attachment, error)
	FindByPage(offset int, limit int) (result []*model.Attachment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAttachmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id uint) (result model.Attachment, err error)
	DeleteByID(id uint) (rowsAffected int64, err error)
	DeleteByIDs(ids []uint) (rowsAffected int64, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (a attachmentDo) GetByID(id uint) (result model.Attachment, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM sys_attachment WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table WHERE id=@id
func (a attachmentDo) DeleteByID(id uint) (rowsAffected int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("DELETE FROM sys_attachment WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	rowsAffected = executeSQL.RowsAffected
	err = executeSQL.Error

	return
}

// DELETE FROM @@table WHERE id IN (@ids)
func (a attachmentDo) DeleteByIDs(ids []uint) (rowsAffected int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, ids)
	generateSQL.WriteString("DELETE FROM sys_attachment WHERE id IN (?) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	rowsAffected = executeSQL.RowsAffected
	err = executeSQL.Error

	return
}

func (a attachmentDo) Debug() IAttachmentDo {
	return a.withDO(a.DO.Debug())
}

func (a attachmentDo) WithContext(ctx context.Context) IAttachmentDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attachmentDo) ReadDB() IAttachmentDo {
	return a.Clauses(dbresolver.Read)
}

func (a attachmentDo) WriteDB() IAttachmentDo {
	return a.Clauses(dbresolver.Write)
}

func (a attachmentDo) Session(config *gorm.Session) IAttachmentDo {
	return a.withDO(a.DO.Session(config))
}

func (a attachmentDo) Clauses(conds ...clause.Expression) IAttachmentDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attachmentDo) Returning(value interface{}, columns ...string) IAttachmentDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attachmentDo) Not(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attachmentDo) Or(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attachmentDo) Select(conds ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attachmentDo) Where(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attachmentDo) Order(conds ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attachmentDo) Distinct(cols ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attachmentDo) Omit(cols ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attachmentDo) Join(table schema.Tabler, on ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attachmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attachmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attachmentDo) Group(cols ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attachmentDo) Having(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attachmentDo) Limit(limit int) IAttachmentDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attachmentDo) Offset(offset int) IAttachmentDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attachmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAttachmentDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attachmentDo) Unscoped() IAttachmentDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attachmentDo) Create(values ...*model.Attachment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attachmentDo) CreateInBatches(values []*model.Attachment, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attachmentDo) Save(values ...*model.Attachment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attachmentDo) First() (*model.Attachment, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) Take() (*model.Attachment, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) Last() (*model.Attachment, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) Find() ([]*model.Attachment, error) {
	result, err := a.DO.Find()
	return result.([]*model.Attachment), err
}

func (a attachmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Attachment, err error) {
	buf := make([]*model.Attachment, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attachmentDo) FindInBatches(result *[]*model.Attachment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attachmentDo) Attrs(attrs ...field.AssignExpr) IAttachmentDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attachmentDo) Assign(attrs ...field.AssignExpr) IAttachmentDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attachmentDo) Joins(fields ...field.RelationField) IAttachmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attachmentDo) Preload(fields ...field.RelationField) IAttachmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attachmentDo) FirstOrInit() (*model.Attachment, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) FirstOrCreate() (*model.Attachment, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attachment), nil
	}
}

func (a attachmentDo) FindByPage(offset int, limit int) (result []*model.Attachment, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attachmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attachmentDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attachmentDo) Delete(models ...*model.Attachment) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attachmentDo) withDO(do gen.Dao) *attachmentDo {
	a.DO = *do.(*gen.DO)
	return a
}
