// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/562589540/jono-gin/internal/app/system/model"
)

func newAdmin(db *gorm.DB, opts ...gen.DOOption) admin {
	_admin := admin{}

	_admin.adminDo.UseDB(db, opts...)
	_admin.adminDo.UseModel(&model.Admin{})

	tableName := _admin.adminDo.TableName()
	_admin.ALL = field.NewAsterisk(tableName)
	_admin.ID = field.NewUint(tableName, "id")
	_admin.CreatedAt = field.NewTime(tableName, "created_at")
	_admin.UpdatedAt = field.NewTime(tableName, "updated_at")
	_admin.DeletedAt = field.NewField(tableName, "deleted_at")
	_admin.UserName = field.NewString(tableName, "user_name")
	_admin.Password = field.NewString(tableName, "password")
	_admin.NickName = field.NewString(tableName, "nick_name")
	_admin.Avatar = field.NewString(tableName, "avatar")
	_admin.Mobile = field.NewString(tableName, "mobile")
	_admin.Email = field.NewString(tableName, "email")
	_admin.Status = field.NewBool(tableName, "status")
	_admin.Sex = field.NewInt8(tableName, "sex")
	_admin.Remark = field.NewString(tableName, "remark")
	_admin.LastLoginIp = field.NewString(tableName, "last_login_ip")
	_admin.LastLoginTime = field.NewTime(tableName, "last_login_time")
	_admin.Birthday = field.NewInt(tableName, "birthday")
	_admin.Address = field.NewString(tableName, "address")
	_admin.DeptID = field.NewUint(tableName, "dept_id")
	_admin.Dept = adminBelongsToDept{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Dept", "model.Dept"),
		Children: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Dept.Children", "model.Dept"),
		},
		Admins: struct {
			field.RelationField
			Dept struct {
				field.RelationField
			}
			RoleSign struct {
				field.RelationField
				Menus struct {
					field.RelationField
					Children struct {
						field.RelationField
					}
					Roles struct {
						field.RelationField
					}
				}
			}
		}{
			RelationField: field.NewRelation("Dept.Admins", "model.Admin"),
			Dept: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Dept.Admins.Dept", "model.Dept"),
			},
			RoleSign: struct {
				field.RelationField
				Menus struct {
					field.RelationField
					Children struct {
						field.RelationField
					}
					Roles struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Dept.Admins.RoleSign", "model.Roles"),
				Menus: struct {
					field.RelationField
					Children struct {
						field.RelationField
					}
					Roles struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Dept.Admins.RoleSign.Menus", "model.Menu"),
					Children: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Dept.Admins.RoleSign.Menus.Children", "model.Menu"),
					},
					Roles: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Dept.Admins.RoleSign.Menus.Roles", "model.Roles"),
					},
				},
			},
		},
	}

	_admin.RoleSign = adminManyToManyRoleSign{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("RoleSign", "model.Roles"),
	}

	_admin.fillFieldMap()

	return _admin
}

type admin struct {
	adminDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	UserName      field.String
	Password      field.String
	NickName      field.String
	Avatar        field.String
	Mobile        field.String
	Email         field.String
	Status        field.Bool
	Sex           field.Int8
	Remark        field.String
	LastLoginIp   field.String
	LastLoginTime field.Time
	Birthday      field.Int
	Address       field.String
	DeptID        field.Uint
	Dept          adminBelongsToDept

	RoleSign adminManyToManyRoleSign

	fieldMap map[string]field.Expr
}

func (a admin) Table(newTableName string) *admin {
	a.adminDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a admin) As(alias string) *admin {
	a.adminDo.DO = *(a.adminDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *admin) updateTableName(table string) *admin {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.UserName = field.NewString(table, "user_name")
	a.Password = field.NewString(table, "password")
	a.NickName = field.NewString(table, "nick_name")
	a.Avatar = field.NewString(table, "avatar")
	a.Mobile = field.NewString(table, "mobile")
	a.Email = field.NewString(table, "email")
	a.Status = field.NewBool(table, "status")
	a.Sex = field.NewInt8(table, "sex")
	a.Remark = field.NewString(table, "remark")
	a.LastLoginIp = field.NewString(table, "last_login_ip")
	a.LastLoginTime = field.NewTime(table, "last_login_time")
	a.Birthday = field.NewInt(table, "birthday")
	a.Address = field.NewString(table, "address")
	a.DeptID = field.NewUint(table, "dept_id")

	a.fillFieldMap()

	return a
}

func (a *admin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *admin) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 20)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["user_name"] = a.UserName
	a.fieldMap["password"] = a.Password
	a.fieldMap["nick_name"] = a.NickName
	a.fieldMap["avatar"] = a.Avatar
	a.fieldMap["mobile"] = a.Mobile
	a.fieldMap["email"] = a.Email
	a.fieldMap["status"] = a.Status
	a.fieldMap["sex"] = a.Sex
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["last_login_ip"] = a.LastLoginIp
	a.fieldMap["last_login_time"] = a.LastLoginTime
	a.fieldMap["birthday"] = a.Birthday
	a.fieldMap["address"] = a.Address
	a.fieldMap["dept_id"] = a.DeptID

}

func (a admin) clone(db *gorm.DB) admin {
	a.adminDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a admin) replaceDB(db *gorm.DB) admin {
	a.adminDo.ReplaceDB(db)
	return a
}

type adminBelongsToDept struct {
	db *gorm.DB

	field.RelationField

	Children struct {
		field.RelationField
	}
	Admins struct {
		field.RelationField
		Dept struct {
			field.RelationField
		}
		RoleSign struct {
			field.RelationField
			Menus struct {
				field.RelationField
				Children struct {
					field.RelationField
				}
				Roles struct {
					field.RelationField
				}
			}
		}
	}
}

func (a adminBelongsToDept) Where(conds ...field.Expr) *adminBelongsToDept {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a adminBelongsToDept) WithContext(ctx context.Context) *adminBelongsToDept {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a adminBelongsToDept) Session(session *gorm.Session) *adminBelongsToDept {
	a.db = a.db.Session(session)
	return &a
}

func (a adminBelongsToDept) Model(m *model.Admin) *adminBelongsToDeptTx {
	return &adminBelongsToDeptTx{a.db.Model(m).Association(a.Name())}
}

type adminBelongsToDeptTx struct{ tx *gorm.Association }

func (a adminBelongsToDeptTx) Find() (result *model.Dept, err error) {
	return result, a.tx.Find(&result)
}

func (a adminBelongsToDeptTx) Append(values ...*model.Dept) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a adminBelongsToDeptTx) Replace(values ...*model.Dept) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a adminBelongsToDeptTx) Delete(values ...*model.Dept) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a adminBelongsToDeptTx) Clear() error {
	return a.tx.Clear()
}

func (a adminBelongsToDeptTx) Count() int64 {
	return a.tx.Count()
}

type adminManyToManyRoleSign struct {
	db *gorm.DB

	field.RelationField
}

func (a adminManyToManyRoleSign) Where(conds ...field.Expr) *adminManyToManyRoleSign {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a adminManyToManyRoleSign) WithContext(ctx context.Context) *adminManyToManyRoleSign {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a adminManyToManyRoleSign) Session(session *gorm.Session) *adminManyToManyRoleSign {
	a.db = a.db.Session(session)
	return &a
}

func (a adminManyToManyRoleSign) Model(m *model.Admin) *adminManyToManyRoleSignTx {
	return &adminManyToManyRoleSignTx{a.db.Model(m).Association(a.Name())}
}

type adminManyToManyRoleSignTx struct{ tx *gorm.Association }

func (a adminManyToManyRoleSignTx) Find() (result []*model.Roles, err error) {
	return result, a.tx.Find(&result)
}

func (a adminManyToManyRoleSignTx) Append(values ...*model.Roles) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a adminManyToManyRoleSignTx) Replace(values ...*model.Roles) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a adminManyToManyRoleSignTx) Delete(values ...*model.Roles) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a adminManyToManyRoleSignTx) Clear() error {
	return a.tx.Clear()
}

func (a adminManyToManyRoleSignTx) Count() int64 {
	return a.tx.Count()
}

type adminDo struct{ gen.DO }

type IAdminDo interface {
	gen.SubQuery
	Debug() IAdminDo
	WithContext(ctx context.Context) IAdminDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminDo
	WriteDB() IAdminDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminDo
	Not(conds ...gen.Condition) IAdminDo
	Or(conds ...gen.Condition) IAdminDo
	Select(conds ...field.Expr) IAdminDo
	Where(conds ...gen.Condition) IAdminDo
	Order(conds ...field.Expr) IAdminDo
	Distinct(cols ...field.Expr) IAdminDo
	Omit(cols ...field.Expr) IAdminDo
	Join(table schema.Tabler, on ...field.Expr) IAdminDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminDo
	Group(cols ...field.Expr) IAdminDo
	Having(conds ...gen.Condition) IAdminDo
	Limit(limit int) IAdminDo
	Offset(offset int) IAdminDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminDo
	Unscoped() IAdminDo
	Create(values ...*model.Admin) error
	CreateInBatches(values []*model.Admin, batchSize int) error
	Save(values ...*model.Admin) error
	First() (*model.Admin, error)
	Take() (*model.Admin, error)
	Last() (*model.Admin, error)
	Find() ([]*model.Admin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Admin, err error)
	FindInBatches(result *[]*model.Admin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Admin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminDo
	Assign(attrs ...field.AssignExpr) IAdminDo
	Joins(fields ...field.RelationField) IAdminDo
	Preload(fields ...field.RelationField) IAdminDo
	FirstOrInit() (*model.Admin, error)
	FirstOrCreate() (*model.Admin, error)
	FindByPage(offset int, limit int) (result []*model.Admin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id uint) (result model.Admin, err error)
	DeleteByID(id uint) (rowsAffected int64, err error)
	DeleteByIDs(ids []uint) (rowsAffected int64, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (a adminDo) GetByID(id uint) (result model.Admin, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM sys_admin WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table WHERE id=@id
func (a adminDo) DeleteByID(id uint) (rowsAffected int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("DELETE FROM sys_admin WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	rowsAffected = executeSQL.RowsAffected
	err = executeSQL.Error

	return
}

// DELETE FROM @@table WHERE id IN (@ids)
func (a adminDo) DeleteByIDs(ids []uint) (rowsAffected int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, ids)
	generateSQL.WriteString("DELETE FROM sys_admin WHERE id IN (?) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	rowsAffected = executeSQL.RowsAffected
	err = executeSQL.Error

	return
}

func (a adminDo) Debug() IAdminDo {
	return a.withDO(a.DO.Debug())
}

func (a adminDo) WithContext(ctx context.Context) IAdminDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminDo) ReadDB() IAdminDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminDo) WriteDB() IAdminDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminDo) Session(config *gorm.Session) IAdminDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminDo) Clauses(conds ...clause.Expression) IAdminDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminDo) Returning(value interface{}, columns ...string) IAdminDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminDo) Not(conds ...gen.Condition) IAdminDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminDo) Or(conds ...gen.Condition) IAdminDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminDo) Select(conds ...field.Expr) IAdminDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminDo) Where(conds ...gen.Condition) IAdminDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminDo) Order(conds ...field.Expr) IAdminDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminDo) Distinct(cols ...field.Expr) IAdminDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminDo) Omit(cols ...field.Expr) IAdminDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminDo) Join(table schema.Tabler, on ...field.Expr) IAdminDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminDo) Group(cols ...field.Expr) IAdminDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminDo) Having(conds ...gen.Condition) IAdminDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminDo) Limit(limit int) IAdminDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminDo) Offset(offset int) IAdminDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminDo) Unscoped() IAdminDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminDo) Create(values ...*model.Admin) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminDo) CreateInBatches(values []*model.Admin, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminDo) Save(values ...*model.Admin) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminDo) First() (*model.Admin, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admin), nil
	}
}

func (a adminDo) Take() (*model.Admin, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admin), nil
	}
}

func (a adminDo) Last() (*model.Admin, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admin), nil
	}
}

func (a adminDo) Find() ([]*model.Admin, error) {
	result, err := a.DO.Find()
	return result.([]*model.Admin), err
}

func (a adminDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Admin, err error) {
	buf := make([]*model.Admin, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminDo) FindInBatches(result *[]*model.Admin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminDo) Attrs(attrs ...field.AssignExpr) IAdminDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminDo) Assign(attrs ...field.AssignExpr) IAdminDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminDo) Joins(fields ...field.RelationField) IAdminDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminDo) Preload(fields ...field.RelationField) IAdminDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminDo) FirstOrInit() (*model.Admin, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admin), nil
	}
}

func (a adminDo) FirstOrCreate() (*model.Admin, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admin), nil
	}
}

func (a adminDo) FindByPage(offset int, limit int) (result []*model.Admin, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminDo) Delete(models ...*model.Admin) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminDo) withDO(do gen.Dao) *adminDo {
	a.DO = *do.(*gen.DO)
	return a
}
